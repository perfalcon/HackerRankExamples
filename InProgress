static int[] climbingLeaderboard(int[] scores, int[] alice) {

        List tempList = new ArrayList();
        int[] result = new int[alice.length];
        for(int i=0;i<scores.length;i++){

            tempList.add(scores[i]);
        }
        
        System.out.println(tempList);
        //remove duplicates
        Set<Integer> set = new LinkedHashSet();
        set.addAll(tempList);
        tempList.clear();
        tempList.addAll(set);
        System.out.println(tempList);
        for(int i=0;i<alice.length;i++){
         int rank = Collections.binarySearch(tempList,alice[i],Collections.reverseOrder());
         System.out.println("Rank-->"+rank);
         if(rank > 0){
             rank++;
         }
         result[i]=Math.abs(rank);   
        }
        System.out.print("rank-->"+result);
        return result;


    }
===
worked solution
int results[] = new int[alice.length];
int rank = 1;
int rankScore = scores[0];

for (int a = alice.length - 1, s = 0; a >= 0; a--) {
	if (alice[a] < rankScore) {
		for (; s < scores.length; s++) {
			if (scores[s] < rankScore) {
				rank++;
				rankScore = scores[s];
			}				
			if(alice[a] >= scores[s]) break;
		}
	}

	results[a] = s == scores.length ? rank + 1 : rank;
}

return results;



====
   
        int current = input[0];
        boolean found = false;
        List list = new ArrayList();

        for (int i = 0; i < input.length; i++) {
            if (current == input[i] && !found) {
                found = true;
            } else if (current != input[i]) {
                System.out.print(" " + current);
                current = input[i];
                found = false;
                list.add(current);
            }
        }
        System.out.print(" " + current);
        list.add(current);
        System.out.println("size of array-->"+list.size()+"\n");
        for (int i = 0; i < list.size(); i++) {            
            System.out.print(" " +list.get(i) );
        }
        int[] scores= new int[list.size()];
        Iterator<Integer> iterator = list.iterator();
        for (int i = 0; i < scores.length; i++)
        {
            scores[i] = iterator.next().intValue();
        }
        System.out.println("scores -->");
        for(int a=0;a<scores.length;a++){
            System.out.print(" "+scores[a]);
        }
    

        



        int results[] = new int[alice.length];
        boolean matched =false;
        for(int j=0;j<alice.length;j++){
            for(int i =scores.length-1;i>=0;i--){
                System.out.println("Comparing -->"+alice[j]+"==="+scores[i]);
                if(alice[j]<=scores[i]){
                    if(alice[j]==scores[i]){
                        results[j]=i+1;
                    }else{
                        results[j]=i+1+1;
                    }                    
                    matched=true;
                    System.out.println("i-->"+i);
                    break;
                }
            }
            if(!matched){
                    results[j]=1;
                }
            System.out.println("j-->" + results[j]);
        }
        for(int k=0; k<results.length;k++){
                System.out.print(" " + results[k]);
        }
===
